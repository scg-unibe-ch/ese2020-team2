{"version":3,"file":"ngx-mat-select-search.js","sources":["ng://ngx-mat-select-search/mat-select-search-clear.directive.ts","ng://ngx-mat-select-search/mat-select-search.component.ts","ng://ngx-mat-select-search/ngx-mat-select-search.module.ts","ng://ngx-mat-select-search/ngx-mat-select-search.ts"],"sourcesContent":["import { Directive } from '@angular/core';\r\n\r\n/**\r\n * Directive for providing a custom clear-icon.\r\n * e.g.\r\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\r\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\r\n * </ngx-mat-select-search>\r\n */\r\n@Directive({\r\n    selector: '[ngxMatSelectSearchClear]'\r\n})\r\nexport class MatSelectSearchClearDirective {}\r\n","/**\r\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  HostBinding,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\r\nimport { MatSelect, SELECT_PANEL_MAX_HEIGHT } from '@angular/material/select';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { A, DOWN_ARROW, END, ESCAPE, HOME, NINE, SPACE, UP_ARROW, Z, ZERO, } from '@angular/cdk/keycodes';\r\nimport { ViewportRuler } from '@angular/cdk/scrolling';\r\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\r\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\r\nimport { delay, filter, map, scan, startWith, switchMap, take, takeUntil, tap } from 'rxjs/operators';\r\n\r\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\r\n\r\n/* tslint:disable:member-ordering component-selector */\r\n/**\r\n * Component providing an input field for searching MatSelect options.\r\n *\r\n * Example usage:\r\n *\r\n * interface Bank {\r\n *  id: string;\r\n *  name: string;\r\n * }\r\n *\r\n * @Component({\r\n *   selector: 'my-app-data-selection',\r\n *   template: `\r\n *     <mat-form-field>\r\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\r\n *         <mat-option>\r\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\r\n *         </mat-option>\r\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\r\n *           {{bank.name}}\r\n *         </mat-option>\r\n *       </mat-select>\r\n *     </mat-form-field>\r\n *   `\r\n * })\r\n * export class DataSelectionComponent implements OnInit, OnDestroy {\r\n *\r\n *   // control for the selected bank\r\n *   public bankCtrl: FormControl = new FormControl();\r\n *   // control for the MatSelect filter keyword\r\n *   public bankFilterCtrl: FormControl = new FormControl();\r\n *\r\n *   // list of banks\r\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\r\n *   // list of banks filtered by search keyword\r\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\r\n *\r\n *   // Subject that emits when the component has been destroyed.\r\n *   private _onDestroy = new Subject<void>();\r\n *\r\n *\r\n *   ngOnInit() {\r\n *     // load the initial bank list\r\n *     this.filteredBanks.next(this.banks.slice());\r\n *     // listen for search field value changes\r\n *     this.bankFilterCtrl.valueChanges\r\n *       .pipe(takeUntil(this._onDestroy))\r\n *       .subscribe(() => {\r\n *         this.filterBanks();\r\n *       });\r\n *   }\r\n *\r\n *   ngOnDestroy() {\r\n *     this._onDestroy.next();\r\n *     this._onDestroy.complete();\r\n *   }\r\n *\r\n *   private filterBanks() {\r\n *     if (!this.banks) {\r\n *       return;\r\n *     }\r\n *\r\n *     // get the search keyword\r\n *     let search = this.bankFilterCtrl.value;\r\n *     if (!search) {\r\n *       this.filteredBanks.next(this.banks.slice());\r\n *       return;\r\n *     } else {\r\n *       search = search.toLowerCase();\r\n *     }\r\n *\r\n *     // filter the banks\r\n *     this.filteredBanks.next(\r\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\r\n *     );\r\n *   }\r\n * }\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-select-search',\r\n  templateUrl: './mat-select-search.component.html',\r\n  styleUrls: ['./mat-select-search.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MatSelectSearchComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatSelectSearchComponent implements OnInit, OnDestroy, ControlValueAccessor {\r\n\r\n  /** Label of the search placeholder */\r\n  @Input() placeholderLabel = 'Suche';\r\n\r\n  /** Type of the search input field */\r\n  @Input() type = 'text';\r\n\r\n  /** Label to be shown when no entries are found. Set to null if no message should be shown. */\r\n  @Input() noEntriesFoundLabel = 'Keine Optionen gefunden';\r\n\r\n  /**\r\n   *  Text that is appended to the currently active item label announced by screen readers,\r\n   *  informing the user of the current index, value and total options.\r\n   *  eg: Bank R (Germany) 1 of 6\r\n  */\r\n  @Input() indexAndLengthScreenReaderText = ' of ';\r\n\r\n  /**\r\n    * Whether or not the search field should be cleared after the dropdown menu is closed.\r\n    * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\r\n    */\r\n  @Input() clearSearchInput = true;\r\n\r\n  /** Whether to show the search-in-progress indicator */\r\n  @Input() searching = false;\r\n\r\n  /** Disables initial focusing of the input field */\r\n  @Input() disableInitialFocus = false;\r\n\r\n  /** Enable clear input on escape pressed */\r\n  @Input() enableClearOnEscapePressed = false;\r\n\r\n  /**\r\n   * Prevents home / end key being propagated to mat-select,\r\n   * allowing to move the cursor within the search input instead of navigating the options\r\n   */\r\n  @Input() preventHomeEndKeyPropagation = false;\r\n\r\n  /** Disables scrolling to active options when option list changes. Useful for server-side search */\r\n  @Input() disableScrollToActiveOnOptionsChanged = false;\r\n\r\n  /** Adds 508 screen reader support for search box */\r\n  @Input() ariaLabel = 'dropdown search';\r\n\r\n  /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\r\n  @Input() showToggleAllCheckbox = false;\r\n\r\n  /** select all checkbox checked state */\r\n  @Input() toggleAllCheckboxChecked = false;\r\n\r\n  /** select all checkbox indeterminate state */\r\n  @Input() toggleAllCheckboxIndeterminate = false;\r\n\r\n  /** Display a message in a tooltip on the toggle-all checkbox */\r\n  @Input() toggleAllCheckboxTooltipMessage = '';\r\n\r\n  /** Define the position of the tooltip on the toggle-all checkbox. */\r\n  @Input() toogleAllCheckboxTooltipPosition: 'left' | 'right' | 'above' | 'below' | 'before' | 'after' = 'below';\r\n\r\n  /** Output emitter to send to parent component with the toggle all boolean */\r\n  @Output() toggleAll = new EventEmitter<boolean>();\r\n\r\n  /** Reference to the search input field */\r\n  @ViewChild('searchSelectInput', { read: ElementRef, static: true }) searchSelectInput: ElementRef;\r\n\r\n  /** Reference to the search input field */\r\n  @ViewChild('innerSelectSearch', { read: ElementRef, static: true }) innerSelectSearch: ElementRef;\r\n\r\n  /** Reference to custom search input clear icon */\r\n  @ContentChild(MatSelectSearchClearDirective, { static: false }) clearIcon: MatSelectSearchClearDirective;\r\n\r\n  @HostBinding('class.mat-select-search-inside-mat-option')\r\n  get isInsideMatOption(): boolean {\r\n    return !!this.matOption;\r\n  }\r\n\r\n  /** Current search value */\r\n  get value(): string {\r\n    return this._formControl.value;\r\n  }\r\n  private _lastExternalInputValue: string;\r\n\r\n  onTouched: Function = (_: any) => { };\r\n\r\n  /** Reference to the MatSelect options */\r\n  public set _options(_options: QueryList<MatOption>) {\r\n    this._options$.next(_options);\r\n  }\r\n  public get _options(): QueryList<MatOption> {\r\n    return this._options$.getValue();\r\n  }\r\n  public _options$: BehaviorSubject<QueryList<MatOption>> = new BehaviorSubject<QueryList<MatOption>>(null);\r\n\r\n  private optionsList$: Observable<MatOption[]> = this._options$.pipe(\r\n    switchMap(_options => _options ?\r\n      _options.changes.pipe(\r\n        map(options => options.toArray()),\r\n        startWith<MatOption[]>(_options.toArray()),\r\n      ) : of(null)\r\n    )\r\n  );\r\n\r\n  private optionsLength$: Observable<number> = this.optionsList$.pipe(\r\n    map(options => options ? options.length : 0)\r\n  );\r\n\r\n  /** Previously selected values when using <mat-select [multiple]=\"true\">*/\r\n  private previousSelectedValues: any[];\r\n\r\n  public _formControl: FormControl = new FormControl('');\r\n\r\n  /** whether to show the no entries found message */\r\n  public _showNoEntriesFound$: Observable<boolean> = combineLatest([\r\n    this._formControl.valueChanges,\r\n    this.optionsLength$\r\n  ]).pipe(\r\n    map(([value, optionsLength]) => this.noEntriesFoundLabel && value\r\n      && optionsLength === this.getOptionsLengthOffset())\r\n  );\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _onDestroy = new Subject<void>();\r\n\r\n\r\n  constructor(@Inject(MatSelect) public matSelect: MatSelect,\r\n    public changeDetectorRef: ChangeDetectorRef,\r\n    private _viewportRuler: ViewportRuler,\r\n    @Optional() @Inject(MatOption) public matOption: MatOption = null,\r\n    private liveAnnouncer: LiveAnnouncer,\r\n    @Optional() @Inject(MatFormField) public matFormField: MatFormField = null\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    // set custom panel class\r\n    const panelClass = 'mat-select-search-panel';\r\n    if (this.matSelect.panelClass) {\r\n      if (Array.isArray(this.matSelect.panelClass)) {\r\n        (<string[]>this.matSelect.panelClass).push(panelClass);\r\n      } else if (typeof this.matSelect.panelClass === 'string') {\r\n        this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\r\n      } else if (typeof this.matSelect.panelClass === 'object') {\r\n        this.matSelect.panelClass[panelClass] = true;\r\n      }\r\n    } else {\r\n      this.matSelect.panelClass = panelClass;\r\n    }\r\n\r\n    // set custom mat-option class if the component was placed inside a mat-option\r\n    if (this.matOption) {\r\n      this.matOption.disabled = true;\r\n      this.matOption._getHostElement().classList.add('contains-mat-select-search');\r\n    } else {\r\n      console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\r\n    }\r\n\r\n    this.initMultiSelectedValuesTracking();\r\n\r\n    // when the select dropdown panel is opened or closed\r\n    this.matSelect.openedChange\r\n      .pipe(\r\n        delay(1),\r\n        takeUntil(this._onDestroy)\r\n      )\r\n      .subscribe((opened) => {\r\n        if (opened) {\r\n          this.updateInputWidth();\r\n          // focus the search field when opening\r\n          if (!this.disableInitialFocus) {\r\n            this._focus();\r\n          }\r\n        } else {\r\n          // clear it when closing\r\n          if (this.clearSearchInput) {\r\n            this._reset();\r\n          }\r\n        }\r\n      });\r\n\r\n\r\n\r\n    // set the first item active after the options changed\r\n    this.matSelect.openedChange\r\n      .pipe(take(1))\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        if (this.matSelect._keyManager) {\r\n          this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy))\r\n            .subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\r\n        } else {\r\n          console.log('_keyManager was not initialized.');\r\n        }\r\n\r\n        this._options = this.matSelect.options;\r\n\r\n        // Closure variable for tracking the most recent first option.\r\n        // In order to avoid avoid causing the list to\r\n        // scroll to the top when options are added to the bottom of\r\n        // the list (eg: infinite scroll), we compare only\r\n        // the changes to the first options to determine if we\r\n        // should set the first item as active.\r\n        // This prevents unnecessary scrolling to the top of the list\r\n        // when options are appended, but allows the first item\r\n        // in the list to be set as active by default when there\r\n        // is no active selection\r\n        let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\r\n\r\n        this._options.changes\r\n          .pipe(\r\n            takeUntil(this._onDestroy)\r\n          )\r\n          .subscribe(() => {\r\n            // avoid \"expression has been changed\" error\r\n            setTimeout(() => {\r\n              // Convert the QueryList to an array\r\n              const options = this._options.toArray();\r\n\r\n              // The true first item is offset by 1\r\n              const currentFirstOption = options[this.getOptionsLengthOffset()];\r\n\r\n              const keyManager = this.matSelect._keyManager;\r\n              if (keyManager && this.matSelect.panelOpen) {\r\n\r\n                // set first item active and input width\r\n\r\n                // Check to see if the first option in these changes is different from the previous.\r\n                const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption);\r\n\r\n                // CASE: The first option is different now.\r\n                // Indiciates we should set it as active and scroll to the top.\r\n                if (firstOptionIsChanged) {\r\n                  keyManager.setFirstItemActive();\r\n                }\r\n\r\n                // wait for panel width changes\r\n                setTimeout(() => {\r\n                  this.updateInputWidth();\r\n                });\r\n\r\n                if (!this.disableScrollToActiveOnOptionsChanged) {\r\n                  this.adjustScrollTopToFitActiveOptionIntoView();\r\n                }\r\n              }\r\n\r\n              // Update our reference\r\n              previousFirstOption = currentFirstOption;\r\n            });\r\n          });\r\n      });\r\n\r\n    // add or remove css class depending on whether to show the no entries found message\r\n    // note: this is hacky\r\n    this._showNoEntriesFound$.pipe(\r\n      takeUntil(this._onDestroy)\r\n    ).subscribe(showNoEntriesFound => {\r\n      // set no entries found class on mat option\r\n      if (this.matOption) {\r\n        if (showNoEntriesFound) {\r\n          this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\r\n        } else {\r\n          this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\r\n        }\r\n      }\r\n    });\r\n\r\n    // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\r\n    this._viewportRuler.change()\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(() => {\r\n        if (this.matSelect.panelOpen) {\r\n          this.updateInputWidth();\r\n        }\r\n      });\r\n\r\n    this.initMultipleHandling();\r\n\r\n    this.optionsList$.pipe(\r\n      takeUntil(this._onDestroy)\r\n    ).subscribe(() => {\r\n      // update view when available options change\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  _emitSelectAllBooleanToParent(state: boolean) {\r\n    this.toggleAll.emit(state);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\r\n\r\n  _isToggleAllCheckboxVisible(): boolean {\r\n    return this.matSelect.multiple && this.showToggleAllCheckbox;\r\n  }\r\n\r\n  /**\r\n   * Handles the key down event with MatSelect.\r\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\r\n   * @param event\r\n   */\r\n  _handleKeydown(event: KeyboardEvent) {\r\n    // Prevent propagation for all alphanumeric characters in order to avoid selection issues\r\n    if ((event.key && event.key.length === 1) ||\r\n      (event.keyCode >= A && event.keyCode <= Z) ||\r\n      (event.keyCode >= ZERO && event.keyCode <= NINE) ||\r\n      (event.keyCode === SPACE)\r\n      || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))\r\n    ) {\r\n      event.stopPropagation();\r\n    }\r\n\r\n    // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\r\n    if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\r\n      this._reset(true);\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the key up event with MatSelect.\r\n   * Allows e.g. the announcing of the currently activeDescendant by screen readers.\r\n   */\r\n  _handleKeyup(event: KeyboardEvent) {\r\n    if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\r\n      const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\r\n      const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\r\n      if (index !== -1) {\r\n        const activeDescendant = this._options.toArray()[index];\r\n        this.liveAnnouncer.announce(\r\n          activeDescendant.viewValue + ' '\r\n          + this.getAriaIndex(index)\r\n          + this.indexAndLengthScreenReaderText\r\n          + this.getAriaLength()\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the index of the current option, taking the offset to length into account.\r\n   * examples:\r\n   *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\r\n   *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\r\n   */\r\n  getAriaIndex(optionIndex: number): number {\r\n    if (this.getOptionsLengthOffset() === 0) {\r\n      return optionIndex + 1;\r\n    }\r\n    return optionIndex;\r\n  }\r\n\r\n  /**\r\n   * Calculate the length of the options, taking the offset to length into account.\r\n   * examples:\r\n   *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\r\n   *    Case 2 [1, 2, 3] will have length of options.length.\r\n   */\r\n  getAriaLength(): number {\r\n    return this._options.toArray().length - this.getOptionsLengthOffset();\r\n  }\r\n\r\n  writeValue(value: string) {\r\n    this._lastExternalInputValue = value;\r\n    this._formControl.setValue(value);\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  onBlur() {\r\n    this.onTouched();\r\n  }\r\n\r\n  registerOnChange(fn: (value: string) => void) {\r\n    this._formControl.valueChanges.pipe(\r\n      filter(value => value !== this._lastExternalInputValue),\r\n      tap(() => this._lastExternalInputValue = undefined),\r\n      takeUntil(this._onDestroy)\r\n    ).subscribe(fn);\r\n  }\r\n\r\n  registerOnTouched(fn: Function) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Focuses the search input field\r\n   */\r\n  public _focus() {\r\n    if (!this.searchSelectInput || !this.matSelect.panel) {\r\n      return;\r\n    }\r\n    // save and restore scrollTop of panel, since it will be reset by focus()\r\n    // note: this is hacky\r\n    const panel = this.matSelect.panel.nativeElement;\r\n    const scrollTop = panel.scrollTop;\r\n\r\n    // focus\r\n    this.searchSelectInput.nativeElement.focus();\r\n\r\n    panel.scrollTop = scrollTop;\r\n  }\r\n\r\n  /**\r\n   * Resets the current search value\r\n   * @param focus whether to focus after resetting\r\n   */\r\n  public _reset(focus?: boolean) {\r\n    this._formControl.setValue('');\r\n    if (focus) {\r\n      this._focus();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Initializes handling <mat-select [multiple]=\"true\">\r\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\r\n   */\r\n  private initMultipleHandling() {\r\n    // if <mat-select [multiple]=\"true\">\r\n    // store previously selected values and restore them when they are deselected\r\n    // because the option is not available while we are currently filtering\r\n    this.matSelect.valueChange\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe((values) => {\r\n        if (this.matSelect.multiple) {\r\n          let restoreSelectedValues = false;\r\n          if (this._formControl.value && this._formControl.value.length\r\n            && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\r\n            if (!values || !Array.isArray(values)) {\r\n              values = [];\r\n            }\r\n            const optionValues = this.matSelect.options.map(option => option.value);\r\n            this.previousSelectedValues.forEach(previousValue => {\r\n              if (!values.some(v => this.matSelect.compareWith(v, previousValue))\r\n                && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\r\n                // if a value that was selected before is deselected and not found in the options, it was deselected\r\n                // due to the filtering, so we restore it.\r\n                values.push(previousValue);\r\n                restoreSelectedValues = true;\r\n              }\r\n            });\r\n          }\r\n\r\n          if (restoreSelectedValues) {\r\n            this.matSelect._onChange(values);\r\n            this.previousSelectedValues = values;\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Scrolls the currently active option into the view if it is not yet visible.\r\n   */\r\n  private adjustScrollTopToFitActiveOptionIntoView(): void {\r\n    if (this.matSelect.panel && this.matSelect.options.length > 0) {\r\n      const matOptionHeight = this.getMatOptionHeight();\r\n      const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\r\n      const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\r\n      // If the component is in a MatOption, the activeItemIndex will be offset by one.\r\n      const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\r\n      const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\r\n\r\n      const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\r\n      const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\r\n\r\n      const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\r\n\r\n      if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\r\n        this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\r\n      } else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\r\n        this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight\r\n          - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\r\n   *  And support all Operation Systems\r\n   */\r\n  public updateInputWidth() {\r\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\r\n      return;\r\n    }\r\n    let element: HTMLElement = this.innerSelectSearch.nativeElement;\r\n    let panelElement: HTMLElement;\r\n    while (element = element.parentElement) {\r\n      if (element.classList.contains('mat-select-panel')) {\r\n        panelElement = element;\r\n        break;\r\n      }\r\n    }\r\n    if (panelElement) {\r\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\r\n    }\r\n  }\r\n\r\n  private getMatOptionHeight(): number {\r\n    if (this.matSelect.options.length > 0) {\r\n      return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   *  Initialize this.previousSelectedValues whenever the search value changes and the previous search value was empty\r\n   *  (i.e. the unfiltered selected options)\r\n   *  Wait for initial option list to capture initial selection\r\n   */\r\n  private initMultiSelectedValuesTracking() {\r\n    this._formControl.valueChanges.pipe(\r\n      startWith<string, string>(undefined),\r\n      scan(\r\n        (acc, currentValue) => ({currentValue, previousValue: acc.currentValue}),\r\n        ({currentValue: undefined, previousValue: undefined})\r\n      ),\r\n      takeUntil(this._onDestroy)\r\n    ).subscribe((value) => {\r\n      const options = this._options ? this._options.toArray() : [];\r\n      if (this.matSelect.multiple && !value.previousValue) {\r\n        this.previousSelectedValues = options\r\n          .filter(option => option.selected)\r\n          .map(option => option.value);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Determine the offset to length that can be caused by the optional matOption used as a search input.\r\n   */\r\n  private getOptionsLengthOffset(): number {\r\n    if (this.matOption) {\r\n      return 1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { MatSelectSearchComponent } from './mat-select-search.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nexport const MatSelectSearchVersion = '3.1.0';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    MatTooltipModule\r\n  ],\r\n  declarations: [\r\n    MatSelectSearchComponent,\r\n    MatSelectSearchClearDirective\r\n  ],\r\n  exports: [\r\n    MatSelectSearchComponent,\r\n    MatSelectSearchClearDirective\r\n  ]\r\n})\r\nexport class NgxMatSelectSearchModule { }\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {MatSelectSearchClearDirective as Éµa} from './mat-select-search-clear.directive';"],"names":["tslib_1.__decorate","tslib_1.__param"],"mappings":"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"}